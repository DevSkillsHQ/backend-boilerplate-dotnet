// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(PresentationVotesDBContex))]
    partial class PresentationVotesDBContexModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("backend.Models.Entities.Option", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("backend.Models.Entities.Poll", b =>
                {
                    b.Property<string>("PollId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionsKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("PollId");

                    b.HasIndex("OptionsKey");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("backend.Models.Entities.Presentation", b =>
                {
                    b.Property<int>("CurrentPollIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PollsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CurrentPollIndex");

                    b.HasIndex("PollsId");

                    b.ToTable("Presentation");
                });

            modelBuilder.Entity("backend.Models.Entities.Vote", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("PollId")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("OptionKey");

                    b.HasIndex("PollId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("backend.Models.Entities.Poll", b =>
                {
                    b.HasOne("backend.Models.Entities.Option", "Options")
                        .WithMany()
                        .HasForeignKey("OptionsKey")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Options");
                });

            modelBuilder.Entity("backend.Models.Entities.Presentation", b =>
                {
                    b.HasOne("backend.Models.Entities.Poll", "Polls")
                        .WithMany()
                        .HasForeignKey("PollsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Polls");
                });

            modelBuilder.Entity("backend.Models.Entities.Vote", b =>
                {
                    b.HasOne("backend.Models.Entities.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionKey")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backend.Models.Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Option");

                    b.Navigation("Poll");
                });
#pragma warning restore 612, 618
        }
    }
}
